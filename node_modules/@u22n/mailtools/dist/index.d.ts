/**
 * Wrap text links in anchor tags
 */
declare function linkify(inputHtml: string): string;

type ReplacementOptions = {
    image?: string;
    other?: string;
};
/**
 * Same as blockRemoteContentCheerio, but to be used as a standalone.
 */
declare function blockRemoteContent(html: string, replacements?: ReplacementOptions): string;

interface ParseMessageOptions {
    /** Remove quotations. Only affects the result messageHtml */
    cleanQuotations?: boolean;
    /** Remove and return signatures. Only affects the result messageHtml */
    cleanSignatures?: boolean;
    /** Automatically convert text links to anchor tags */
    autolink?: boolean;
    /** Fix broken links and add the href to the title tag */
    enhanceLinks?: boolean;
    /** Specific viewport to enforce. For example "<meta name="viewport" content="width=device-width">" */
    forceViewport?: false | string;
    /** Replace remote images with a transparent image, and replace other remote URLs with '#' */
    noRemoteContent?: boolean;
    /** Replace remote content with custom URLs */
    remoteContentReplacements?: ReplacementOptions;
    /** Append the given style to the HTML <head> */
    includeStyle?: false | string;
    /** Remove specific styles that could affect the rendering of the html */
    cleanStyles?: boolean | string[];
}
/**
 * Parse an HTML email and make transformation needed before returning it.
 * Returns the extracted body of the message, and the complete message for reference.
 *
 * Beside the optional, this always:
 * - Remove comments
 * - Remove scripts
 * - Remove tracking pixels
 * - Remove trailing whitespace
 */
declare function parseMessage(emailHtml: string, options?: ParseMessageOptions): Promise<{
    /** The original complete message. */
    completeHtml: string;
    /** The body of the message, stripped from secondary information */
    parsedMessageHtml: string;
    /** True if a quote or signature was found and stripped */
    didFindQuotation: boolean | null;
    /** True if a signature was found and stripped */
    didFindSignature: boolean | null;
    /** The signature in plain text */
    foundSignaturePlainText: string | null;
    /** The signature in HTML */
    foundSignatureHtml: string | null;
}>;

export { type ParseMessageOptions, type ReplacementOptions, blockRemoteContent, linkify, parseMessage };
